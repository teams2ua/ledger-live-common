/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ledger.core.message.bitcoin.Transaction', null, global);
goog.exportSymbol('proto.ledger.core.message.bitcoin.TransactionInput', null, global);
goog.exportSymbol('proto.ledger.core.message.bitcoin.TransactionOutput', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ledger.core.message.bitcoin.TransactionInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ledger.core.message.bitcoin.TransactionInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ledger.core.message.bitcoin.TransactionInput.displayName = 'proto.ledger.core.message.bitcoin.TransactionInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ledger.core.message.bitcoin.TransactionOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ledger.core.message.bitcoin.TransactionOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ledger.core.message.bitcoin.TransactionOutput.displayName = 'proto.ledger.core.message.bitcoin.TransactionOutput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ledger.core.message.bitcoin.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ledger.core.message.bitcoin.Transaction.repeatedFields_, null);
};
goog.inherits(proto.ledger.core.message.bitcoin.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ledger.core.message.bitcoin.Transaction.displayName = 'proto.ledger.core.message.bitcoin.Transaction';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ledger.core.message.bitcoin.TransactionInput.prototype.toObject = function(opt_includeInstance) {
  return proto.ledger.core.message.bitcoin.TransactionInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ledger.core.message.bitcoin.TransactionInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.TransactionInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    previosTransactionHash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    previousOutputIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sequenceNumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
    derivationPath: jspb.Message.getFieldWithDefault(msg, 4, ""),
    address: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ledger.core.message.bitcoin.TransactionInput}
 */
proto.ledger.core.message.bitcoin.TransactionInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ledger.core.message.bitcoin.TransactionInput;
  return proto.ledger.core.message.bitcoin.TransactionInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ledger.core.message.bitcoin.TransactionInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ledger.core.message.bitcoin.TransactionInput}
 */
proto.ledger.core.message.bitcoin.TransactionInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreviosTransactionHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPreviousOutputIndex(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequenceNumber(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDerivationPath(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ledger.core.message.bitcoin.TransactionInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ledger.core.message.bitcoin.TransactionInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ledger.core.message.bitcoin.TransactionInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.TransactionInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPreviosTransactionHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPreviousOutputIndex();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getSequenceNumber();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getDerivationPath();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string previos_transaction_hash = 1;
 * @return {string}
 */
proto.ledger.core.message.bitcoin.TransactionInput.prototype.getPreviosTransactionHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ledger.core.message.bitcoin.TransactionInput.prototype.setPreviosTransactionHash = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 previous_output_index = 2;
 * @return {number}
 */
proto.ledger.core.message.bitcoin.TransactionInput.prototype.getPreviousOutputIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ledger.core.message.bitcoin.TransactionInput.prototype.setPreviousOutputIndex = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 sequence_number = 3;
 * @return {number}
 */
proto.ledger.core.message.bitcoin.TransactionInput.prototype.getSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ledger.core.message.bitcoin.TransactionInput.prototype.setSequenceNumber = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string derivation_path = 4;
 * @return {string}
 */
proto.ledger.core.message.bitcoin.TransactionInput.prototype.getDerivationPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.ledger.core.message.bitcoin.TransactionInput.prototype.setDerivationPath = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string address = 5;
 * @return {string}
 */
proto.ledger.core.message.bitcoin.TransactionInput.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.ledger.core.message.bitcoin.TransactionInput.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ledger.core.message.bitcoin.TransactionOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.ledger.core.message.bitcoin.TransactionOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ledger.core.message.bitcoin.TransactionOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.TransactionOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    derivationPath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ledger.core.message.bitcoin.TransactionOutput}
 */
proto.ledger.core.message.bitcoin.TransactionOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ledger.core.message.bitcoin.TransactionOutput;
  return proto.ledger.core.message.bitcoin.TransactionOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ledger.core.message.bitcoin.TransactionOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ledger.core.message.bitcoin.TransactionOutput}
 */
proto.ledger.core.message.bitcoin.TransactionOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDerivationPath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ledger.core.message.bitcoin.TransactionOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ledger.core.message.bitcoin.TransactionOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ledger.core.message.bitcoin.TransactionOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.TransactionOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDerivationPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string derivation_path = 1;
 * @return {string}
 */
proto.ledger.core.message.bitcoin.TransactionOutput.prototype.getDerivationPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ledger.core.message.bitcoin.TransactionOutput.prototype.setDerivationPath = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.ledger.core.message.bitcoin.TransactionOutput.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ledger.core.message.bitcoin.TransactionOutput.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ledger.core.message.bitcoin.Transaction.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ledger.core.message.bitcoin.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.ledger.core.message.bitcoin.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ledger.core.message.bitcoin.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fees: jspb.Message.getFieldWithDefault(msg, 2, ""),
    inputsList: jspb.Message.toObjectList(msg.getInputsList(),
    proto.ledger.core.message.bitcoin.TransactionInput.toObject, includeInstance),
    outputsList: jspb.Message.toObjectList(msg.getOutputsList(),
    proto.ledger.core.message.bitcoin.TransactionOutput.toObject, includeInstance),
    timestamp: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ledger.core.message.bitcoin.Transaction}
 */
proto.ledger.core.message.bitcoin.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ledger.core.message.bitcoin.Transaction;
  return proto.ledger.core.message.bitcoin.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ledger.core.message.bitcoin.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ledger.core.message.bitcoin.Transaction}
 */
proto.ledger.core.message.bitcoin.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFees(value);
      break;
    case 3:
      var value = new proto.ledger.core.message.bitcoin.TransactionInput;
      reader.readMessage(value,proto.ledger.core.message.bitcoin.TransactionInput.deserializeBinaryFromReader);
      msg.addInputs(value);
      break;
    case 4:
      var value = new proto.ledger.core.message.bitcoin.TransactionOutput;
      reader.readMessage(value,proto.ledger.core.message.bitcoin.TransactionOutput.deserializeBinaryFromReader);
      msg.addOutputs(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ledger.core.message.bitcoin.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ledger.core.message.bitcoin.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ledger.core.message.bitcoin.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFees();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ledger.core.message.bitcoin.TransactionInput.serializeBinaryToWriter
    );
  }
  f = message.getOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.ledger.core.message.bitcoin.TransactionOutput.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.ledger.core.message.bitcoin.Transaction.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ledger.core.message.bitcoin.Transaction.prototype.setHash = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string fees = 2;
 * @return {string}
 */
proto.ledger.core.message.bitcoin.Transaction.prototype.getFees = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ledger.core.message.bitcoin.Transaction.prototype.setFees = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated TransactionInput inputs = 3;
 * @return {!Array<!proto.ledger.core.message.bitcoin.TransactionInput>}
 */
proto.ledger.core.message.bitcoin.Transaction.prototype.getInputsList = function() {
  return /** @type{!Array<!proto.ledger.core.message.bitcoin.TransactionInput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ledger.core.message.bitcoin.TransactionInput, 3));
};


/** @param {!Array<!proto.ledger.core.message.bitcoin.TransactionInput>} value */
proto.ledger.core.message.bitcoin.Transaction.prototype.setInputsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ledger.core.message.bitcoin.TransactionInput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ledger.core.message.bitcoin.TransactionInput}
 */
proto.ledger.core.message.bitcoin.Transaction.prototype.addInputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ledger.core.message.bitcoin.TransactionInput, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.ledger.core.message.bitcoin.Transaction.prototype.clearInputsList = function() {
  this.setInputsList([]);
};


/**
 * repeated TransactionOutput outputs = 4;
 * @return {!Array<!proto.ledger.core.message.bitcoin.TransactionOutput>}
 */
proto.ledger.core.message.bitcoin.Transaction.prototype.getOutputsList = function() {
  return /** @type{!Array<!proto.ledger.core.message.bitcoin.TransactionOutput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ledger.core.message.bitcoin.TransactionOutput, 4));
};


/** @param {!Array<!proto.ledger.core.message.bitcoin.TransactionOutput>} value */
proto.ledger.core.message.bitcoin.Transaction.prototype.setOutputsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.ledger.core.message.bitcoin.TransactionOutput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ledger.core.message.bitcoin.TransactionOutput}
 */
proto.ledger.core.message.bitcoin.Transaction.prototype.addOutputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.ledger.core.message.bitcoin.TransactionOutput, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.ledger.core.message.bitcoin.Transaction.prototype.clearOutputsList = function() {
  this.setOutputsList([]);
};


/**
 * optional int64 timestamp = 5;
 * @return {number}
 */
proto.ledger.core.message.bitcoin.Transaction.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ledger.core.message.bitcoin.Transaction.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


goog.object.extend(exports, proto.ledger.core.message.bitcoin);
