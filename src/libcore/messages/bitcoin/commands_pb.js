/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var bitcoin_account_pb = require('../bitcoin/account_pb.js');
goog.object.extend(proto, bitcoin_account_pb);
var bitcoin_operation_pb = require('../bitcoin/operation_pb.js');
goog.object.extend(proto, bitcoin_operation_pb);
var common_amount_pb = require('../common/amount_pb.js');
goog.object.extend(proto, common_amount_pb);
var common_block_pb = require('../common/block_pb.js');
goog.object.extend(proto, common_block_pb);
goog.exportSymbol('proto.ledger.core.message.bitcoin.BitcoinRequest', null, global);
goog.exportSymbol('proto.ledger.core.message.bitcoin.GetBalanceRequest', null, global);
goog.exportSymbol('proto.ledger.core.message.bitcoin.GetBalanceResponse', null, global);
goog.exportSymbol('proto.ledger.core.message.bitcoin.GetFreshAddressRequest', null, global);
goog.exportSymbol('proto.ledger.core.message.bitcoin.GetFreshAddressResponse', null, global);
goog.exportSymbol('proto.ledger.core.message.bitcoin.GetLastBlockRequest', null, global);
goog.exportSymbol('proto.ledger.core.message.bitcoin.GetLastBlockResponse', null, global);
goog.exportSymbol('proto.ledger.core.message.bitcoin.GetOperationsRequest', null, global);
goog.exportSymbol('proto.ledger.core.message.bitcoin.GetOperationsResponse', null, global);
goog.exportSymbol('proto.ledger.core.message.bitcoin.LedgerExplorerConfig', null, global);
goog.exportSymbol('proto.ledger.core.message.bitcoin.SyncAccountRequest', null, global);
goog.exportSymbol('proto.ledger.core.message.bitcoin.SyncAccountResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ledger.core.message.bitcoin.LedgerExplorerConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ledger.core.message.bitcoin.LedgerExplorerConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ledger.core.message.bitcoin.LedgerExplorerConfig.displayName = 'proto.ledger.core.message.bitcoin.LedgerExplorerConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ledger.core.message.bitcoin.SyncAccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ledger.core.message.bitcoin.SyncAccountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ledger.core.message.bitcoin.SyncAccountRequest.displayName = 'proto.ledger.core.message.bitcoin.SyncAccountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ledger.core.message.bitcoin.SyncAccountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ledger.core.message.bitcoin.SyncAccountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ledger.core.message.bitcoin.SyncAccountResponse.displayName = 'proto.ledger.core.message.bitcoin.SyncAccountResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ledger.core.message.bitcoin.GetBalanceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ledger.core.message.bitcoin.GetBalanceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ledger.core.message.bitcoin.GetBalanceRequest.displayName = 'proto.ledger.core.message.bitcoin.GetBalanceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ledger.core.message.bitcoin.GetBalanceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ledger.core.message.bitcoin.GetBalanceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ledger.core.message.bitcoin.GetBalanceResponse.displayName = 'proto.ledger.core.message.bitcoin.GetBalanceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ledger.core.message.bitcoin.GetOperationsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ledger.core.message.bitcoin.GetOperationsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ledger.core.message.bitcoin.GetOperationsRequest.displayName = 'proto.ledger.core.message.bitcoin.GetOperationsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ledger.core.message.bitcoin.GetOperationsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ledger.core.message.bitcoin.GetOperationsResponse.repeatedFields_, null);
};
goog.inherits(proto.ledger.core.message.bitcoin.GetOperationsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ledger.core.message.bitcoin.GetOperationsResponse.displayName = 'proto.ledger.core.message.bitcoin.GetOperationsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ledger.core.message.bitcoin.GetLastBlockRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ledger.core.message.bitcoin.GetLastBlockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ledger.core.message.bitcoin.GetLastBlockRequest.displayName = 'proto.ledger.core.message.bitcoin.GetLastBlockRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ledger.core.message.bitcoin.GetLastBlockResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ledger.core.message.bitcoin.GetLastBlockResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ledger.core.message.bitcoin.GetLastBlockResponse.displayName = 'proto.ledger.core.message.bitcoin.GetLastBlockResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ledger.core.message.bitcoin.GetFreshAddressRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ledger.core.message.bitcoin.GetFreshAddressRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ledger.core.message.bitcoin.GetFreshAddressRequest.displayName = 'proto.ledger.core.message.bitcoin.GetFreshAddressRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ledger.core.message.bitcoin.GetFreshAddressResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ledger.core.message.bitcoin.GetFreshAddressResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ledger.core.message.bitcoin.GetFreshAddressResponse.displayName = 'proto.ledger.core.message.bitcoin.GetFreshAddressResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ledger.core.message.bitcoin.BitcoinRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ledger.core.message.bitcoin.BitcoinRequest.oneofGroups_);
};
goog.inherits(proto.ledger.core.message.bitcoin.BitcoinRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ledger.core.message.bitcoin.BitcoinRequest.displayName = 'proto.ledger.core.message.bitcoin.BitcoinRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ledger.core.message.bitcoin.LedgerExplorerConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.ledger.core.message.bitcoin.LedgerExplorerConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ledger.core.message.bitcoin.LedgerExplorerConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.LedgerExplorerConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    endpoint: jspb.Message.getFieldWithDefault(msg, 2, ""),
    port: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ledger.core.message.bitcoin.LedgerExplorerConfig}
 */
proto.ledger.core.message.bitcoin.LedgerExplorerConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ledger.core.message.bitcoin.LedgerExplorerConfig;
  return proto.ledger.core.message.bitcoin.LedgerExplorerConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ledger.core.message.bitcoin.LedgerExplorerConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ledger.core.message.bitcoin.LedgerExplorerConfig}
 */
proto.ledger.core.message.bitcoin.LedgerExplorerConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndpoint(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ledger.core.message.bitcoin.LedgerExplorerConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ledger.core.message.bitcoin.LedgerExplorerConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ledger.core.message.bitcoin.LedgerExplorerConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.LedgerExplorerConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getEndpoint();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 version = 1;
 * @return {number}
 */
proto.ledger.core.message.bitcoin.LedgerExplorerConfig.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ledger.core.message.bitcoin.LedgerExplorerConfig.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string endpoint = 2;
 * @return {string}
 */
proto.ledger.core.message.bitcoin.LedgerExplorerConfig.prototype.getEndpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ledger.core.message.bitcoin.LedgerExplorerConfig.prototype.setEndpoint = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 port = 3;
 * @return {number}
 */
proto.ledger.core.message.bitcoin.LedgerExplorerConfig.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ledger.core.message.bitcoin.LedgerExplorerConfig.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ledger.core.message.bitcoin.SyncAccountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ledger.core.message.bitcoin.SyncAccountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ledger.core.message.bitcoin.SyncAccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.SyncAccountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: (f = msg.getAccountId()) && bitcoin_account_pb.AccountID.toObject(includeInstance, f),
    explorer: (f = msg.getExplorer()) && proto.ledger.core.message.bitcoin.LedgerExplorerConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ledger.core.message.bitcoin.SyncAccountRequest}
 */
proto.ledger.core.message.bitcoin.SyncAccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ledger.core.message.bitcoin.SyncAccountRequest;
  return proto.ledger.core.message.bitcoin.SyncAccountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ledger.core.message.bitcoin.SyncAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ledger.core.message.bitcoin.SyncAccountRequest}
 */
proto.ledger.core.message.bitcoin.SyncAccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bitcoin_account_pb.AccountID;
      reader.readMessage(value,bitcoin_account_pb.AccountID.deserializeBinaryFromReader);
      msg.setAccountId(value);
      break;
    case 2:
      var value = new proto.ledger.core.message.bitcoin.LedgerExplorerConfig;
      reader.readMessage(value,proto.ledger.core.message.bitcoin.LedgerExplorerConfig.deserializeBinaryFromReader);
      msg.setExplorer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ledger.core.message.bitcoin.SyncAccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ledger.core.message.bitcoin.SyncAccountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ledger.core.message.bitcoin.SyncAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.SyncAccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bitcoin_account_pb.AccountID.serializeBinaryToWriter
    );
  }
  f = message.getExplorer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ledger.core.message.bitcoin.LedgerExplorerConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccountID account_id = 1;
 * @return {?proto.ledger.core.message.bitcoin.AccountID}
 */
proto.ledger.core.message.bitcoin.SyncAccountRequest.prototype.getAccountId = function() {
  return /** @type{?proto.ledger.core.message.bitcoin.AccountID} */ (
    jspb.Message.getWrapperField(this, bitcoin_account_pb.AccountID, 1));
};


/** @param {?proto.ledger.core.message.bitcoin.AccountID|undefined} value */
proto.ledger.core.message.bitcoin.SyncAccountRequest.prototype.setAccountId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ledger.core.message.bitcoin.SyncAccountRequest.prototype.clearAccountId = function() {
  this.setAccountId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ledger.core.message.bitcoin.SyncAccountRequest.prototype.hasAccountId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LedgerExplorerConfig explorer = 2;
 * @return {?proto.ledger.core.message.bitcoin.LedgerExplorerConfig}
 */
proto.ledger.core.message.bitcoin.SyncAccountRequest.prototype.getExplorer = function() {
  return /** @type{?proto.ledger.core.message.bitcoin.LedgerExplorerConfig} */ (
    jspb.Message.getWrapperField(this, proto.ledger.core.message.bitcoin.LedgerExplorerConfig, 2));
};


/** @param {?proto.ledger.core.message.bitcoin.LedgerExplorerConfig|undefined} value */
proto.ledger.core.message.bitcoin.SyncAccountRequest.prototype.setExplorer = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ledger.core.message.bitcoin.SyncAccountRequest.prototype.clearExplorer = function() {
  this.setExplorer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ledger.core.message.bitcoin.SyncAccountRequest.prototype.hasExplorer = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ledger.core.message.bitcoin.SyncAccountResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ledger.core.message.bitcoin.SyncAccountResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ledger.core.message.bitcoin.SyncAccountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.SyncAccountResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    newAcc: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ledger.core.message.bitcoin.SyncAccountResponse}
 */
proto.ledger.core.message.bitcoin.SyncAccountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ledger.core.message.bitcoin.SyncAccountResponse;
  return proto.ledger.core.message.bitcoin.SyncAccountResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ledger.core.message.bitcoin.SyncAccountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ledger.core.message.bitcoin.SyncAccountResponse}
 */
proto.ledger.core.message.bitcoin.SyncAccountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNewAcc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ledger.core.message.bitcoin.SyncAccountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ledger.core.message.bitcoin.SyncAccountResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ledger.core.message.bitcoin.SyncAccountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.SyncAccountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewAcc();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool new_acc = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ledger.core.message.bitcoin.SyncAccountResponse.prototype.getNewAcc = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.ledger.core.message.bitcoin.SyncAccountResponse.prototype.setNewAcc = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ledger.core.message.bitcoin.GetBalanceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ledger.core.message.bitcoin.GetBalanceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ledger.core.message.bitcoin.GetBalanceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.GetBalanceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: (f = msg.getAccountId()) && bitcoin_account_pb.AccountID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ledger.core.message.bitcoin.GetBalanceRequest}
 */
proto.ledger.core.message.bitcoin.GetBalanceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ledger.core.message.bitcoin.GetBalanceRequest;
  return proto.ledger.core.message.bitcoin.GetBalanceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ledger.core.message.bitcoin.GetBalanceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ledger.core.message.bitcoin.GetBalanceRequest}
 */
proto.ledger.core.message.bitcoin.GetBalanceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bitcoin_account_pb.AccountID;
      reader.readMessage(value,bitcoin_account_pb.AccountID.deserializeBinaryFromReader);
      msg.setAccountId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ledger.core.message.bitcoin.GetBalanceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ledger.core.message.bitcoin.GetBalanceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ledger.core.message.bitcoin.GetBalanceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.GetBalanceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bitcoin_account_pb.AccountID.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccountID account_id = 1;
 * @return {?proto.ledger.core.message.bitcoin.AccountID}
 */
proto.ledger.core.message.bitcoin.GetBalanceRequest.prototype.getAccountId = function() {
  return /** @type{?proto.ledger.core.message.bitcoin.AccountID} */ (
    jspb.Message.getWrapperField(this, bitcoin_account_pb.AccountID, 1));
};


/** @param {?proto.ledger.core.message.bitcoin.AccountID|undefined} value */
proto.ledger.core.message.bitcoin.GetBalanceRequest.prototype.setAccountId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ledger.core.message.bitcoin.GetBalanceRequest.prototype.clearAccountId = function() {
  this.setAccountId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ledger.core.message.bitcoin.GetBalanceRequest.prototype.hasAccountId = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ledger.core.message.bitcoin.GetBalanceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ledger.core.message.bitcoin.GetBalanceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ledger.core.message.bitcoin.GetBalanceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.GetBalanceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: (f = msg.getAmount()) && common_amount_pb.Amount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ledger.core.message.bitcoin.GetBalanceResponse}
 */
proto.ledger.core.message.bitcoin.GetBalanceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ledger.core.message.bitcoin.GetBalanceResponse;
  return proto.ledger.core.message.bitcoin.GetBalanceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ledger.core.message.bitcoin.GetBalanceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ledger.core.message.bitcoin.GetBalanceResponse}
 */
proto.ledger.core.message.bitcoin.GetBalanceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_amount_pb.Amount;
      reader.readMessage(value,common_amount_pb.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ledger.core.message.bitcoin.GetBalanceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ledger.core.message.bitcoin.GetBalanceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ledger.core.message.bitcoin.GetBalanceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.GetBalanceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_amount_pb.Amount.serializeBinaryToWriter
    );
  }
};


/**
 * optional ledger.core.message.common.Amount amount = 1;
 * @return {?proto.ledger.core.message.common.Amount}
 */
proto.ledger.core.message.bitcoin.GetBalanceResponse.prototype.getAmount = function() {
  return /** @type{?proto.ledger.core.message.common.Amount} */ (
    jspb.Message.getWrapperField(this, common_amount_pb.Amount, 1));
};


/** @param {?proto.ledger.core.message.common.Amount|undefined} value */
proto.ledger.core.message.bitcoin.GetBalanceResponse.prototype.setAmount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ledger.core.message.bitcoin.GetBalanceResponse.prototype.clearAmount = function() {
  this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ledger.core.message.bitcoin.GetBalanceResponse.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ledger.core.message.bitcoin.GetOperationsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ledger.core.message.bitcoin.GetOperationsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ledger.core.message.bitcoin.GetOperationsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.GetOperationsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: (f = msg.getAccountId()) && bitcoin_account_pb.AccountID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ledger.core.message.bitcoin.GetOperationsRequest}
 */
proto.ledger.core.message.bitcoin.GetOperationsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ledger.core.message.bitcoin.GetOperationsRequest;
  return proto.ledger.core.message.bitcoin.GetOperationsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ledger.core.message.bitcoin.GetOperationsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ledger.core.message.bitcoin.GetOperationsRequest}
 */
proto.ledger.core.message.bitcoin.GetOperationsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bitcoin_account_pb.AccountID;
      reader.readMessage(value,bitcoin_account_pb.AccountID.deserializeBinaryFromReader);
      msg.setAccountId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ledger.core.message.bitcoin.GetOperationsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ledger.core.message.bitcoin.GetOperationsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ledger.core.message.bitcoin.GetOperationsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.GetOperationsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bitcoin_account_pb.AccountID.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccountID account_id = 1;
 * @return {?proto.ledger.core.message.bitcoin.AccountID}
 */
proto.ledger.core.message.bitcoin.GetOperationsRequest.prototype.getAccountId = function() {
  return /** @type{?proto.ledger.core.message.bitcoin.AccountID} */ (
    jspb.Message.getWrapperField(this, bitcoin_account_pb.AccountID, 1));
};


/** @param {?proto.ledger.core.message.bitcoin.AccountID|undefined} value */
proto.ledger.core.message.bitcoin.GetOperationsRequest.prototype.setAccountId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ledger.core.message.bitcoin.GetOperationsRequest.prototype.clearAccountId = function() {
  this.setAccountId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ledger.core.message.bitcoin.GetOperationsRequest.prototype.hasAccountId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ledger.core.message.bitcoin.GetOperationsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ledger.core.message.bitcoin.GetOperationsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ledger.core.message.bitcoin.GetOperationsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ledger.core.message.bitcoin.GetOperationsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.GetOperationsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    operationsList: jspb.Message.toObjectList(msg.getOperationsList(),
    bitcoin_operation_pb.Operation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ledger.core.message.bitcoin.GetOperationsResponse}
 */
proto.ledger.core.message.bitcoin.GetOperationsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ledger.core.message.bitcoin.GetOperationsResponse;
  return proto.ledger.core.message.bitcoin.GetOperationsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ledger.core.message.bitcoin.GetOperationsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ledger.core.message.bitcoin.GetOperationsResponse}
 */
proto.ledger.core.message.bitcoin.GetOperationsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bitcoin_operation_pb.Operation;
      reader.readMessage(value,bitcoin_operation_pb.Operation.deserializeBinaryFromReader);
      msg.addOperations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ledger.core.message.bitcoin.GetOperationsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ledger.core.message.bitcoin.GetOperationsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ledger.core.message.bitcoin.GetOperationsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.GetOperationsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      bitcoin_operation_pb.Operation.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Operation operations = 1;
 * @return {!Array<!proto.ledger.core.message.bitcoin.Operation>}
 */
proto.ledger.core.message.bitcoin.GetOperationsResponse.prototype.getOperationsList = function() {
  return /** @type{!Array<!proto.ledger.core.message.bitcoin.Operation>} */ (
    jspb.Message.getRepeatedWrapperField(this, bitcoin_operation_pb.Operation, 1));
};


/** @param {!Array<!proto.ledger.core.message.bitcoin.Operation>} value */
proto.ledger.core.message.bitcoin.GetOperationsResponse.prototype.setOperationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ledger.core.message.bitcoin.Operation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ledger.core.message.bitcoin.Operation}
 */
proto.ledger.core.message.bitcoin.GetOperationsResponse.prototype.addOperations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ledger.core.message.bitcoin.Operation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.ledger.core.message.bitcoin.GetOperationsResponse.prototype.clearOperationsList = function() {
  this.setOperationsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ledger.core.message.bitcoin.GetLastBlockRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ledger.core.message.bitcoin.GetLastBlockRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ledger.core.message.bitcoin.GetLastBlockRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.GetLastBlockRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: (f = msg.getAccountId()) && bitcoin_account_pb.AccountID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ledger.core.message.bitcoin.GetLastBlockRequest}
 */
proto.ledger.core.message.bitcoin.GetLastBlockRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ledger.core.message.bitcoin.GetLastBlockRequest;
  return proto.ledger.core.message.bitcoin.GetLastBlockRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ledger.core.message.bitcoin.GetLastBlockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ledger.core.message.bitcoin.GetLastBlockRequest}
 */
proto.ledger.core.message.bitcoin.GetLastBlockRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bitcoin_account_pb.AccountID;
      reader.readMessage(value,bitcoin_account_pb.AccountID.deserializeBinaryFromReader);
      msg.setAccountId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ledger.core.message.bitcoin.GetLastBlockRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ledger.core.message.bitcoin.GetLastBlockRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ledger.core.message.bitcoin.GetLastBlockRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.GetLastBlockRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bitcoin_account_pb.AccountID.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccountID account_id = 1;
 * @return {?proto.ledger.core.message.bitcoin.AccountID}
 */
proto.ledger.core.message.bitcoin.GetLastBlockRequest.prototype.getAccountId = function() {
  return /** @type{?proto.ledger.core.message.bitcoin.AccountID} */ (
    jspb.Message.getWrapperField(this, bitcoin_account_pb.AccountID, 1));
};


/** @param {?proto.ledger.core.message.bitcoin.AccountID|undefined} value */
proto.ledger.core.message.bitcoin.GetLastBlockRequest.prototype.setAccountId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ledger.core.message.bitcoin.GetLastBlockRequest.prototype.clearAccountId = function() {
  this.setAccountId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ledger.core.message.bitcoin.GetLastBlockRequest.prototype.hasAccountId = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ledger.core.message.bitcoin.GetLastBlockResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ledger.core.message.bitcoin.GetLastBlockResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ledger.core.message.bitcoin.GetLastBlockResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.GetLastBlockResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    lastBlock: (f = msg.getLastBlock()) && common_block_pb.Block.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ledger.core.message.bitcoin.GetLastBlockResponse}
 */
proto.ledger.core.message.bitcoin.GetLastBlockResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ledger.core.message.bitcoin.GetLastBlockResponse;
  return proto.ledger.core.message.bitcoin.GetLastBlockResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ledger.core.message.bitcoin.GetLastBlockResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ledger.core.message.bitcoin.GetLastBlockResponse}
 */
proto.ledger.core.message.bitcoin.GetLastBlockResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_block_pb.Block;
      reader.readMessage(value,common_block_pb.Block.deserializeBinaryFromReader);
      msg.setLastBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ledger.core.message.bitcoin.GetLastBlockResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ledger.core.message.bitcoin.GetLastBlockResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ledger.core.message.bitcoin.GetLastBlockResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.GetLastBlockResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLastBlock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_block_pb.Block.serializeBinaryToWriter
    );
  }
};


/**
 * optional ledger.core.message.common.Block last_block = 1;
 * @return {?proto.ledger.core.message.common.Block}
 */
proto.ledger.core.message.bitcoin.GetLastBlockResponse.prototype.getLastBlock = function() {
  return /** @type{?proto.ledger.core.message.common.Block} */ (
    jspb.Message.getWrapperField(this, common_block_pb.Block, 1));
};


/** @param {?proto.ledger.core.message.common.Block|undefined} value */
proto.ledger.core.message.bitcoin.GetLastBlockResponse.prototype.setLastBlock = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ledger.core.message.bitcoin.GetLastBlockResponse.prototype.clearLastBlock = function() {
  this.setLastBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ledger.core.message.bitcoin.GetLastBlockResponse.prototype.hasLastBlock = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ledger.core.message.bitcoin.GetFreshAddressRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ledger.core.message.bitcoin.GetFreshAddressRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ledger.core.message.bitcoin.GetFreshAddressRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.GetFreshAddressRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: (f = msg.getAccountId()) && bitcoin_account_pb.AccountID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ledger.core.message.bitcoin.GetFreshAddressRequest}
 */
proto.ledger.core.message.bitcoin.GetFreshAddressRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ledger.core.message.bitcoin.GetFreshAddressRequest;
  return proto.ledger.core.message.bitcoin.GetFreshAddressRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ledger.core.message.bitcoin.GetFreshAddressRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ledger.core.message.bitcoin.GetFreshAddressRequest}
 */
proto.ledger.core.message.bitcoin.GetFreshAddressRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bitcoin_account_pb.AccountID;
      reader.readMessage(value,bitcoin_account_pb.AccountID.deserializeBinaryFromReader);
      msg.setAccountId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ledger.core.message.bitcoin.GetFreshAddressRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ledger.core.message.bitcoin.GetFreshAddressRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ledger.core.message.bitcoin.GetFreshAddressRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.GetFreshAddressRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bitcoin_account_pb.AccountID.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccountID account_id = 1;
 * @return {?proto.ledger.core.message.bitcoin.AccountID}
 */
proto.ledger.core.message.bitcoin.GetFreshAddressRequest.prototype.getAccountId = function() {
  return /** @type{?proto.ledger.core.message.bitcoin.AccountID} */ (
    jspb.Message.getWrapperField(this, bitcoin_account_pb.AccountID, 1));
};


/** @param {?proto.ledger.core.message.bitcoin.AccountID|undefined} value */
proto.ledger.core.message.bitcoin.GetFreshAddressRequest.prototype.setAccountId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ledger.core.message.bitcoin.GetFreshAddressRequest.prototype.clearAccountId = function() {
  this.setAccountId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ledger.core.message.bitcoin.GetFreshAddressRequest.prototype.hasAccountId = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ledger.core.message.bitcoin.GetFreshAddressResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ledger.core.message.bitcoin.GetFreshAddressResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ledger.core.message.bitcoin.GetFreshAddressResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.GetFreshAddressResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    path: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ledger.core.message.bitcoin.GetFreshAddressResponse}
 */
proto.ledger.core.message.bitcoin.GetFreshAddressResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ledger.core.message.bitcoin.GetFreshAddressResponse;
  return proto.ledger.core.message.bitcoin.GetFreshAddressResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ledger.core.message.bitcoin.GetFreshAddressResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ledger.core.message.bitcoin.GetFreshAddressResponse}
 */
proto.ledger.core.message.bitcoin.GetFreshAddressResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ledger.core.message.bitcoin.GetFreshAddressResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ledger.core.message.bitcoin.GetFreshAddressResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ledger.core.message.bitcoin.GetFreshAddressResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.GetFreshAddressResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.ledger.core.message.bitcoin.GetFreshAddressResponse.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ledger.core.message.bitcoin.GetFreshAddressResponse.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string path = 2;
 * @return {string}
 */
proto.ledger.core.message.bitcoin.GetFreshAddressResponse.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ledger.core.message.bitcoin.GetFreshAddressResponse.prototype.setPath = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ledger.core.message.bitcoin.BitcoinRequest.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.ledger.core.message.bitcoin.BitcoinRequest.RequestCase = {
  REQUEST_NOT_SET: 0,
  SYNC_ACCOUNT: 1,
  GET_BALANCE: 2,
  GET_OPERATIONS: 3,
  GET_LAST_BLOCK: 4,
  GET_FRESH_ADDRESS: 5
};

/**
 * @return {proto.ledger.core.message.bitcoin.BitcoinRequest.RequestCase}
 */
proto.ledger.core.message.bitcoin.BitcoinRequest.prototype.getRequestCase = function() {
  return /** @type {proto.ledger.core.message.bitcoin.BitcoinRequest.RequestCase} */(jspb.Message.computeOneofCase(this, proto.ledger.core.message.bitcoin.BitcoinRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ledger.core.message.bitcoin.BitcoinRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ledger.core.message.bitcoin.BitcoinRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ledger.core.message.bitcoin.BitcoinRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.BitcoinRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    syncAccount: (f = msg.getSyncAccount()) && proto.ledger.core.message.bitcoin.SyncAccountRequest.toObject(includeInstance, f),
    getBalance: (f = msg.getGetBalance()) && proto.ledger.core.message.bitcoin.GetBalanceRequest.toObject(includeInstance, f),
    getOperations: (f = msg.getGetOperations()) && proto.ledger.core.message.bitcoin.GetOperationsRequest.toObject(includeInstance, f),
    getLastBlock: (f = msg.getGetLastBlock()) && proto.ledger.core.message.bitcoin.GetLastBlockRequest.toObject(includeInstance, f),
    getFreshAddress: (f = msg.getGetFreshAddress()) && proto.ledger.core.message.bitcoin.GetFreshAddressRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ledger.core.message.bitcoin.BitcoinRequest}
 */
proto.ledger.core.message.bitcoin.BitcoinRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ledger.core.message.bitcoin.BitcoinRequest;
  return proto.ledger.core.message.bitcoin.BitcoinRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ledger.core.message.bitcoin.BitcoinRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ledger.core.message.bitcoin.BitcoinRequest}
 */
proto.ledger.core.message.bitcoin.BitcoinRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ledger.core.message.bitcoin.SyncAccountRequest;
      reader.readMessage(value,proto.ledger.core.message.bitcoin.SyncAccountRequest.deserializeBinaryFromReader);
      msg.setSyncAccount(value);
      break;
    case 2:
      var value = new proto.ledger.core.message.bitcoin.GetBalanceRequest;
      reader.readMessage(value,proto.ledger.core.message.bitcoin.GetBalanceRequest.deserializeBinaryFromReader);
      msg.setGetBalance(value);
      break;
    case 3:
      var value = new proto.ledger.core.message.bitcoin.GetOperationsRequest;
      reader.readMessage(value,proto.ledger.core.message.bitcoin.GetOperationsRequest.deserializeBinaryFromReader);
      msg.setGetOperations(value);
      break;
    case 4:
      var value = new proto.ledger.core.message.bitcoin.GetLastBlockRequest;
      reader.readMessage(value,proto.ledger.core.message.bitcoin.GetLastBlockRequest.deserializeBinaryFromReader);
      msg.setGetLastBlock(value);
      break;
    case 5:
      var value = new proto.ledger.core.message.bitcoin.GetFreshAddressRequest;
      reader.readMessage(value,proto.ledger.core.message.bitcoin.GetFreshAddressRequest.deserializeBinaryFromReader);
      msg.setGetFreshAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ledger.core.message.bitcoin.BitcoinRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ledger.core.message.bitcoin.BitcoinRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ledger.core.message.bitcoin.BitcoinRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.BitcoinRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSyncAccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ledger.core.message.bitcoin.SyncAccountRequest.serializeBinaryToWriter
    );
  }
  f = message.getGetBalance();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ledger.core.message.bitcoin.GetBalanceRequest.serializeBinaryToWriter
    );
  }
  f = message.getGetOperations();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ledger.core.message.bitcoin.GetOperationsRequest.serializeBinaryToWriter
    );
  }
  f = message.getGetLastBlock();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ledger.core.message.bitcoin.GetLastBlockRequest.serializeBinaryToWriter
    );
  }
  f = message.getGetFreshAddress();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ledger.core.message.bitcoin.GetFreshAddressRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional SyncAccountRequest sync_account = 1;
 * @return {?proto.ledger.core.message.bitcoin.SyncAccountRequest}
 */
proto.ledger.core.message.bitcoin.BitcoinRequest.prototype.getSyncAccount = function() {
  return /** @type{?proto.ledger.core.message.bitcoin.SyncAccountRequest} */ (
    jspb.Message.getWrapperField(this, proto.ledger.core.message.bitcoin.SyncAccountRequest, 1));
};


/** @param {?proto.ledger.core.message.bitcoin.SyncAccountRequest|undefined} value */
proto.ledger.core.message.bitcoin.BitcoinRequest.prototype.setSyncAccount = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.ledger.core.message.bitcoin.BitcoinRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ledger.core.message.bitcoin.BitcoinRequest.prototype.clearSyncAccount = function() {
  this.setSyncAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ledger.core.message.bitcoin.BitcoinRequest.prototype.hasSyncAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GetBalanceRequest get_balance = 2;
 * @return {?proto.ledger.core.message.bitcoin.GetBalanceRequest}
 */
proto.ledger.core.message.bitcoin.BitcoinRequest.prototype.getGetBalance = function() {
  return /** @type{?proto.ledger.core.message.bitcoin.GetBalanceRequest} */ (
    jspb.Message.getWrapperField(this, proto.ledger.core.message.bitcoin.GetBalanceRequest, 2));
};


/** @param {?proto.ledger.core.message.bitcoin.GetBalanceRequest|undefined} value */
proto.ledger.core.message.bitcoin.BitcoinRequest.prototype.setGetBalance = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.ledger.core.message.bitcoin.BitcoinRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ledger.core.message.bitcoin.BitcoinRequest.prototype.clearGetBalance = function() {
  this.setGetBalance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ledger.core.message.bitcoin.BitcoinRequest.prototype.hasGetBalance = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional GetOperationsRequest get_operations = 3;
 * @return {?proto.ledger.core.message.bitcoin.GetOperationsRequest}
 */
proto.ledger.core.message.bitcoin.BitcoinRequest.prototype.getGetOperations = function() {
  return /** @type{?proto.ledger.core.message.bitcoin.GetOperationsRequest} */ (
    jspb.Message.getWrapperField(this, proto.ledger.core.message.bitcoin.GetOperationsRequest, 3));
};


/** @param {?proto.ledger.core.message.bitcoin.GetOperationsRequest|undefined} value */
proto.ledger.core.message.bitcoin.BitcoinRequest.prototype.setGetOperations = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.ledger.core.message.bitcoin.BitcoinRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ledger.core.message.bitcoin.BitcoinRequest.prototype.clearGetOperations = function() {
  this.setGetOperations(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ledger.core.message.bitcoin.BitcoinRequest.prototype.hasGetOperations = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional GetLastBlockRequest get_last_block = 4;
 * @return {?proto.ledger.core.message.bitcoin.GetLastBlockRequest}
 */
proto.ledger.core.message.bitcoin.BitcoinRequest.prototype.getGetLastBlock = function() {
  return /** @type{?proto.ledger.core.message.bitcoin.GetLastBlockRequest} */ (
    jspb.Message.getWrapperField(this, proto.ledger.core.message.bitcoin.GetLastBlockRequest, 4));
};


/** @param {?proto.ledger.core.message.bitcoin.GetLastBlockRequest|undefined} value */
proto.ledger.core.message.bitcoin.BitcoinRequest.prototype.setGetLastBlock = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.ledger.core.message.bitcoin.BitcoinRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ledger.core.message.bitcoin.BitcoinRequest.prototype.clearGetLastBlock = function() {
  this.setGetLastBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ledger.core.message.bitcoin.BitcoinRequest.prototype.hasGetLastBlock = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional GetFreshAddressRequest get_fresh_address = 5;
 * @return {?proto.ledger.core.message.bitcoin.GetFreshAddressRequest}
 */
proto.ledger.core.message.bitcoin.BitcoinRequest.prototype.getGetFreshAddress = function() {
  return /** @type{?proto.ledger.core.message.bitcoin.GetFreshAddressRequest} */ (
    jspb.Message.getWrapperField(this, proto.ledger.core.message.bitcoin.GetFreshAddressRequest, 5));
};


/** @param {?proto.ledger.core.message.bitcoin.GetFreshAddressRequest|undefined} value */
proto.ledger.core.message.bitcoin.BitcoinRequest.prototype.setGetFreshAddress = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.ledger.core.message.bitcoin.BitcoinRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ledger.core.message.bitcoin.BitcoinRequest.prototype.clearGetFreshAddress = function() {
  this.setGetFreshAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ledger.core.message.bitcoin.BitcoinRequest.prototype.hasGetFreshAddress = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.ledger.core.message.bitcoin);
